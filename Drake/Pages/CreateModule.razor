@page "/EditModule"
@using System.Text.Json;
@using Drake.Modules;
@using Drake.UglyDuckling;
@using global::UglyDuckling;
@inject IHttpClientFactory factory
@inject UglyDucklingEngine engine

<div class="mainarea">
    <MonacoEditor Id="monacoeditor" OnDidChangeModelDecorations="ModelDecorationChanged" @ref="_monacoeditor" ConstructionOptions="EditorConstructionOptions" />
    <span class="failed">
        <table>
            @foreach (var e in Errors)
            {
                <tr><td>@e.StartLineNumber</td><td>@e.Message</td></tr>
            }
            @if (!String.IsNullOrEmpty(ErrorMessage))
            {
                <tr><td>-</td><td>@ErrorMessage</td></tr>
            }
        </table>
    </span>
</div>
<div class="sidearea">
    <input type="text" class="urlbox" @bind="@Url" placeholder="Url" />
    <Button OnClick="TestModule">Test Module</Button>

    @if (ModuleResult != null)
    {
        <h2>Test results</h2>
        <h3>Should Match</h3>
        <ul>
        @foreach (var r in ModuleResult.ShouldMatch)
        {
            <li title="@r.Match.Pattern">
                @if (r.IsMatched)
                {
                    <span class="success">&check;</span>
                }
                else
                {
                    <span class="failed">
                        &#120;
                    </span>
                }
                @r.Match.Type
            </li>
        }
        </ul>
        <ul>
            @if (ModuleResult.ShouldNotMatch != null && ModuleResult.ShouldNotMatch.Any())
            {
                @foreach (var r in ModuleResult.ShouldNotMatch)
                {
                    <li title="@r.Match.Pattern">
                        @if (r.IsMatched)
                        {
                            <span class="success">&check;</span>
                        }
                        else
                        {
                            <span class="failed">
                                &#120;
                            </span>
                        }
                        @r.Match.Type
                    </li>
                }
            }
        </ul>
    }

    <br />

    <br />


    @if (ModuleResult != null && ModuleResult.VulnerabilityFound != null && (ModuleResult.VulnerabilityFound ?? false))
    {
        <span class="success">Vulnerability found</span>
        <lottie-player src="https://assets6.lottiefiles.com/packages/lf20_wcnjmdp1.json" background="transparent" speed="1" style="width: 300px; height: 300px;margin:auto;" autoplay></lottie-player>

    }
    else if (ModuleResult!=null && ModuleResult.VulnerabilityFound != null && ModuleResult.VulnerabilityFound.Value==false)
    {
        <span class="failed">Vulnerability not found</span>
        <lottie-player src="https://assets3.lottiefiles.com/packages/lf20_tl52xzvn.json" background="transparent" speed="1" style="width: 300px; height: 300px;margin:auto;" autoplay></lottie-player>
    }

</div>

@code
{

    async Task ModelDecorationChanged(ModelDecorationsChangedEvent ev)
    {
        var model = await _monacoeditor.GetModel();
        Errors = await model.jsRuntime.InvokeAsync<List<Marker>>("getMarkers", model.Uri);

    }
    string Url = "";
    string Module = "";
    string ResponseBody = "";
    List<Marker> Errors = new();
    ModuleResult? ModuleResult = null;
    MonacoEditor _monacoeditor { get; set; }
    Module? module = null;
    string ErrorMessage = "";
    int RequiredMatches = 0;
    async Task TestModule()
    {
        try
        {
            ModuleResult = null;
            ErrorMessage = "";
            var json = await _monacoeditor.GetValue();
            Module? module = JsonSerializer.Deserialize<Module>(json);

            //Do Request
            var client = factory.CreateClient();
            client.BaseAddress = new Uri(Url);
            if (module?.Request.Path != null)
            {
                module.Request.Paths.Add(module.Request.Path);

            }

            foreach (var path in module.Request.Paths)
            {
                var requestMessage = new HttpRequestMessage();

                requestMessage.Method = new HttpMethod(module.Request.Method ?? "GET");
                requestMessage.RequestUri = new Uri(Url + path);
                //requestMessage.SetBrowserRequestMode(BrowserRequestMode.);
                if (requestMessage.Method.Method != "GET" && requestMessage.Method.Method != "HEAD")
                {
                    requestMessage.Content = new StringContent(module.Request.Body ?? "");
                }
                if (module.Request.Headers != null && requestMessage.Content != null)
                {
                    foreach (var header in module.Request.Headers)
                    {
                        string[] headerparts = header.Split(":");
                        requestMessage.Content.Headers.TryAddWithoutValidation(headerparts[0], headerparts[1]);
                    }
                }
                var response = await client.SendAsync(requestMessage);
                var responseStatusCode = response.StatusCode;

                var responseBody = await response.Content.ReadAsStringAsync();

                ModuleResult = await engine.ValidateRequestAsync(module, responseBody, (int)responseStatusCode, response.Headers);

                client.Dispose();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }



    bool monacoInitialized = false;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!monacoInitialized && _monacoeditor != null)
        {
            try
            {
                var model = await _monacoeditor.GetModel();
                await model.jsRuntime.InvokeVoidAsync("setModelSchema", model.Uri);
                monacoInitialized = true;
            }
            catch { }
            //This is a horrible workaround to get Monaco loaded without having a button
            StateHasChanged();

        }
        await base.OnAfterRenderAsync(firstRender);
    }



    StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                Language = "json",
                Value = tempjson
            };
    }


}